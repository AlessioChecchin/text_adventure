@startuml
!theme reddress-darkblue

Class Item{
-int id
-String name
+Item(int,String)
+int getId()
+String getName()
}

Class Game{
-Graph<StoryNode, StoryNodeLink> gameGraph
-StoryNode currentNode
-StoryNode previousNode
-Stage stage
+Game()
+Graph<StoryNode, StoryNodeLink> getGameGraph()
+StoryNode getCureentNode()
+void setCurrentNode(StoryNode)
+void setStage(Stage)
+Stage getStage()
+boolean hasPreviousNode()
+void invalidatePreviousNode()
+StoryNode getPreviousNode()
}

Class Player{
-String name
-List<Item> inventory
+void setName(String)
+String getName()
+List<Item> getInventory()
+
}

Class Room{
-String name
-String description
-List<Item> items
+Room(String, String)
+String getName()
+String getDescription
+void setName(String)
+void setDescription(String)
+List<Item> getItems()
+void setItems(List<Item>)
}

Class StoryNodeLink{
-Action action
+Action getAction()
+void setAction(Action)
}

Class Action{
-String actionName
+Action(String)
+String getActionName()
}

Class Dungeon{

}

Class ApplicationContextProvider{
-ApplicationContextProvider instance
-Game game
+ApplicationContextProvider()
+ApplicationContextProvider getIstance()
+void load(String, Stage)
+void load(Game, Stage)
+Game getGame()
}

Class RoomController{
@FXML
-Label currentRoom
-Button backButton
-VBox box
-ApplicationContext context
+void initialize()
+void back()
}

@enduml