@startuml
!theme materia-outline

skinparam ArrowColor #9803fc
skinparam BackgroundColor #FFFFFF
skinparam ArrowColor #9803fc
skinparam ActorBorderColor #9803fc
skinparam ActorFontColor #9803fc
skinparam ActorBackgroundColor #9803fc
skinparam ParticipantFontColor #9803fc
skinparam ParticipantBorderColor #9803fc
skinparam ParticipantBackgroundColor #FFFFFF
skinparam {
 SequenceGroupBorderColor #9803fc
}


actor User
participant Display
participant CmdFight
participant CmdDodge
participant ApplicationContext
participant Game
participant StoryNode
participant RandomCollection
participant Player
participant Monster




CmdFight -> CmdDodge: dodge
CmdDodge -> ApplicationContext: get current game
ApplicationContext --> CmdDodge
CmdDodge -> Game: get current StoryNode and current Player
Game --> CmdDodge
CmdDodge -> StoryNode: get monster in current StoryNode
StoryNode --> CmdDodge

alt player has "dodge" left
  CmdDodge -> RandomCollection: get a random decision handler \n(between DODGE and ATTACK)
  RandomCollection --> CmdDodge
  CmdDodge -> CmdDodge: monsterMove = next decision from the decision handler
  alt monsterMove = DODGE
    alt monster doens not have 'dodge' left
      CmdDodge -> CmdDodge : monsterMove = ATTACK
    end
  end 
  alt monster is attacking
    CmdDodge -> Player: get player attack damage
    Player --> CmdDodge
    CmdDodge -> Monster: hit monster and reduce its hp by 'player attack damage' hp
    CmdDodge -> User: "Dodged the incoming attack. Monster hit"
  else monster is dodging
    CmdDodge -> User: "Both dodged at the same time"
    end
else player does not have any "dodge" left
  CmdDodge -> User: "No dodge left"
end
@enduml