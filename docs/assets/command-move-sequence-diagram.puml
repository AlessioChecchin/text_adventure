@startuml
!theme materia-outline

skinparam ArrowColor #9803fc
skinparam BackgroundColor #FFFFFF
skinparam ArrowColor #9803fc
skinparam ActorBorderColor #9803fc
skinparam ActorFontColor #9803fc
skinparam ActorBackgroundColor #9803fc
skinparam ParticipantFontColor #9803fc
skinparam ParticipantBorderColor #9803fc
skinparam ParticipantBackgroundColor #FFFFFF
skinparam {
 SequenceGroupBorderColor #9803fc
}

participant CmdMove
participant "I/O Stream"
participant Game
participant Player
participant GameGraph
participant StoryNodeLink
participant ApplicationContext

-> CmdMove: execute()
activate CmdMove
CmdMove -> ApplicationContext: getGame()
activate ApplicationContext
ApplicationContext --> CmdMove
deactivate ApplicationContext

CmdMove -> Game: getCurrentNode(), getGameGraph()
activate Game
Game --> CmdMove
deactivate Game

CmdMove -> GameGraph: getOutgoingEdges(currentNode)
activate GameGraph
GameGraph --> CmdMove
deactivate GameGraph


loop foreach outgoingEdge
  CmdMove -> Action: getAction()
  activate Action
  Action --> CmdMove
  deactivate Action

  opt action matches command argument (eg. north, south, ...)

    CmdMove -> StoryNodeLink: getLocked()
    activate StoryNodeLink
    StoryNodeLink --> CmdMove
    deactivate StoryNodeLink

    alt edge locked
      CmdMove -> Player: getItems()
      activate Player
      Player --> CmdMove
      deactivate Player

      CmdMove -> CmdMove: Search a key in the items that matches edge key.

      alt key found
        CmdMove -> StoryNodeLink: unlockEdge()
        CmdMove -> Game: setCurrentNode(targetNode)
      else else
        CmdMove -> "I/O Stream": Notify that the player does not have the correct key.
      end
    else else
      CmdMove -> Game: setCurrentNode(targetNode)
    end
  end
end

opt no action matched command argument
  CmdMove -> "I/O Stream": Notify that the argument is not valid.
end

deactivate CmdMove


@enduml